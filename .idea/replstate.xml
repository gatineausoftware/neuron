<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1423518930090">{:repl-history {:ide [], :local [&quot;(vec (map #(Character/getNumericValue %) (filter #(and (not= % \\return) (not= % \\newline)) s)))&quot; &quot;(def string-&gt;bitmap (vec (map #(Character/getNumericValue %) (filter #(and (not= % \\return) (not= % \\newline)) s))))\n&quot; &quot;(def string-&gt;bitmap [s] (vec (map #(Character/getNumericValue %) (filter #(and (not= % \\return) (not= % \\newline)) s))))\n&quot; &quot;(defn string-&gt;bitmap [s] (vec (map #(Character/getNumericValue %) (filter #(and (not= % \\return) (not= % \\newline)) s))))&quot; &quot;(string-bitmap s)&quot; &quot;(string-&gt; bitmap s)&quot; &quot;(string-&gt;bitmap s)&quot; &quot;(count (string-&gt;bitmap s))&quot; &quot;(io/file \&quot;trainingDigits\&quot;)&quot; &quot;(.list (io/file \&quot;trainingDigits\&quot;))&quot; &quot;(print (.list (io/file \&quot;trainingDigits\&quot;)))&quot; &quot;(.isDirectory (io/file \&quot;trainingDigits\&quot;))&quot; &quot;(.listFiles (io/file \&quot;trainingDigits\&quot;))&quot; &quot;(def files (file-seq (io/file \&quot;trainingDigits\&quot;)))&quot; &quot; (take 10 files)&quot; &quot; (doall files)&quot; &quot;(map str (.listFiles (io/file \&quot;trainingDigits\&quot;)))&quot; &quot;(map .getName (.listFiles (io/file \&quot;trainingDigits\&quot;)))&quot; &quot;(map #(.getName %) (.listFiles (io/file \&quot;trainingDigits\&quot;)))&quot; &quot;(first \&quot;adfa\&quot;)&quot; &quot;(map #(-&gt;&gt; % .getName first) (.listFiles (io/file \&quot;trainingDigits\&quot;)))&quot; &quot;(map #(-&gt;&gt; % .getName first Character/getNumericValue) (.listFiles (io/file \&quot;trainingDigits\&quot;)))&quot; &quot;(map #([inc % [%]]) [1 2 3])&quot; &quot;[(inc 1) (inc 2)]&quot; &quot;(defn get-inputs [file]\n let [ouput (-&gt;&gt; file .getName first Character/getNumericValue)\n      input (string-&gt;bitmap (slurp file) )]\n [input output]\n )\n&quot; &quot;(defn get-inputs [file]\n (let [ouput (-&gt;&gt; file .getName first Character/getNumericValue)\n       input (string-&gt;bitmap (slurp file))]\n  [input output])\n )&quot; &quot;(defn get-inputs [file]\n (let [output (-&gt;&gt; file .getName first Character/getNumericValue)\n       input (string-&gt;bitmap (slurp file))]\n  [input output])\n )\n&quot; &quot;(map get-inputs (.listFiles (io/file \&quot;trainingDigits\&quot;)))&quot; &quot;(require [clojure.java.io :as io])&quot; &quot;(first (.listFiles (io/file \&quot;trainingDigits\&quot;)))\n       \n       &quot; &quot;(defn string-&gt;bitmap [s] (vec (map #(Character/getNumericValue %) (filter #(and (not= % \\return) (not= % \\newline)) s))))\n\n(defn get-labels [fileList] (map #(-&gt;&gt; % .getName first Character/getNumericValue) fileList))\n\n(defn get-inputs [file]\n (let [output (-&gt;&gt; file .getName first Character/getNumericValue)\n       input (string-&gt;bitmap (slurp file))]\n  [input output])\n )&quot; &quot;(get-inputs (first (.listFiles (io/file \&quot;trainingDigits\&quot;))))\n       \n       &quot; &quot;(def sample-data (map get-inputs (.listFiles (io/file \&quot;trainingDigits\&quot;))))\n       \n       &quot; &quot;(take 5 sample-data)&quot; &quot;(def decimal-&gt;binary {0 [0 0 0 0] 1 [0 0 0 1] 2 [0 0 1 0] 3 [0 0 1 1] 4 [0 1 0 0] 5 [0 1 0 1 ] 6 [0 1 1 0 ] 7 [0 1 1 1 ] 8 [1 0 0 0 ] 9 [1 0 0 1]})\n&quot; &quot;(decimal-&gt;binary 1)&quot; &quot;(decimal-&gt;binary 2)&quot; &quot;\n(defn get-inputs [file]\n (let [output (-&gt;&gt; file .getName first Character/getNumericValue decimal-&gt;binary)\n       input (string-&gt;bitmap (slurp file))]\n  [input output])\n )\n\n(def decimal-&gt;binary {0 [0 0 0 0] 1 [0 0 0 1] 2 [0 0 1 0] 3 [0 0 1 1] 4 [0 1 0 0] 5 [0 1 0 1 ] 6 [0 1 1 0 ] 7 [0 1 1 1 ] 8 [1 0 0 0 ] 9 [1 0 0 1]})\n&quot; &quot;(vec '(1 2 3))\n     &quot; &quot;(vec '([1] [2] [3 [3 4]]))\n     &quot; &quot;(def sample-data (vec (map get-inputs (.listFiles (io/file \&quot;trainingDigits\&quot;)))))\n       \n       &quot; &quot;(defn get-inputs [file]\n (let [output (-&gt;&gt; file .getName first Character/getNumericValue decimal-&gt;binary)\n       input (string-&gt;bitmap (slurp file))]\n  [input output])\n )\n\n(def decimal-&gt;binary {0 [0 0 0 0] 1 [0 0 0 1] 2 [0 0 1 0] 3 [0 0 1 1] 4 [0 1 0 0] 5 [0 1 0 1 ] 6 [0 1 1 0 ] 7 [0 1 1 1 ] 8 [1 0 0 0 ] 9 [1 0 0 1]})\n&quot; &quot;(def sample-data ((map get-inputs (.listFiles (io/file \&quot;trainingDigits\&quot;)))))\n       \n       &quot; &quot;(last sample-data)&quot; &quot;(defn network (build-network [1024 40 4] .2 1 sample-data))&quot; &quot;(def network (build-network [1024 40 4] .2 1 sample-data))&quot; &quot;(def network (build-network [1024 40 4] 0.2 1 sample-data))&quot; &quot;(def network (build-network [1024 40 4] 0.2 50 sample-data))&quot; &quot;(fp network (last sample-data))&quot; &quot;(fp network (first (last sample-data)))&quot; &quot;(fp network (first (first sample-data)))&quot; &quot;network&quot; &quot;(assoc-in a: 2 {})&quot; &quot;(assoc-in a: 2 {} )&quot; &quot;(def data {})&quot; &quot;(assoc-in data [1] [[1 1 1 1]])&quot; &quot;(assoc-in data (conj [2 2 2 2] (data 2)) )&quot; &quot;(assoc-in data (conj (data 2) [2 2 2 2]) )&quot; &quot;(assoc-in data [2] (conj (data 2) [2 2 2 2]) )&quot; &quot;(def data 2 (assoc-in data [2] (conj (data 2) [2 2 2 2])))&quot; &quot;(def data2 (assoc-in data [2] (conj (data 2) [2 2 2 2])))&quot; &quot;data2&quot; &quot;(assoc-in data2 [2] (conj (data 2) [2 2 2 2]) )&quot; &quot;(data 2)&quot; &quot;(data2 2)&quot; &quot;(assoc-in data2 [2] (conj (data2 2) [2 2 2 2]) )&quot; &quot;(reduce #(assoc-in %1 [%2]) {} (range 10))&quot; &quot;(reduce #(assoc-in %1 [%2] []) {} (range 10))&quot; &quot;(reduce #(assoc %1 [%2] []) {} (range 10))&quot; &quot;(reduce #(assoc %1 %2 []) {} (range 10))&quot; &quot;(assoc {} 1 [[1 2 3]])&quot; &quot;(def data (assoc {} 1 [[1 2 3]]))&quot; &quot;data&quot; &quot;(assoc data 1 (conj (data 1) [4 5 6]) )&quot; &quot;(defn get-inputs2 [directory]\n (reduce #(\n          (let [output (-&gt;&gt; %2 .getName first Character/getNumericValue decimal-&gt;binary)\n                input (string-&gt;bitmap (slurp %2))]\n           (assoc %1 output (conj (%1 output) input) )\n           )\n          ) {} (.listFiles (io/file \&quot;trainingDigits\&quot;))\n         ))&quot; &quot;(defn get-inputs2 [directory]\n (reduce #(\n          (let [output (-&gt;&gt; %2 .getName first Character/getNumericValue decimal-&gt;binary)\n                input (string-&gt;bitmap (slurp %2))]\n           (print \&quot;map \&quot; %1)\n           (print \&quot;input \&quot; input)\n\n           (assoc %1 output (conj (%1 output) input) )\n           )\n          ) {} (.listFiles (io/file \&quot;trainingDigits\&quot;))\n         ))&quot; &quot;(defmacro dbg[x] `(let [x# ~x] (println \&quot;dbg:\&quot; '~x \&quot;=\&quot; x#) x#))&quot; &quot;(defn get-inputs2 [directory]\n (reduce #(\n          (let [output (-&gt;&gt; %2 .getName first Character/getNumericValue decimal-&gt;binary)\n                input (string-&gt;bitmap (slurp %2))]\n\n           (dbg (assoc %1 output (conj (%1 output) input)))\n           )\n          ) {} (.listFiles (io/file \&quot;trainingDigits\&quot;))\n         ))&quot; &quot;(defn get-inputs2 [directory]\n (reduce #(\n          (let [output (-&gt;&gt; %2 .getName first Character/getNumericValue)\n                input (string-&gt;bitmap (slurp %2))]\n\n           (dbg (assoc %1 output (conj (%1 output) input)))\n           )\n          ) {} (.listFiles (io/file \&quot;trainingDigits\&quot;))\n         ))\n&quot; &quot;\n(defn get-inputs2 [directory]\n (reduce (fn [data inputFile]\n          (\n           (let [output (-&gt;&gt; inputFile .getName first Character/getNumericValue)\n                 input (string-&gt;bitmap (slurp inputFile))]\n\n            (println \&quot;output \&quot; output)\n            (dbg (assoc data output (conj (data output) input)))\n            )\n           )) {} (.listFiles (io/file \&quot;trainingDigits\&quot;))\n         ))&quot; &quot;(def blah [[1 2] [3 4] [5 6] [1 9]])&quot; &quot;(defn get-inputs2 [directory]\n (reduce (fn [data inputFile]\n\n          (let [output (-&gt;&gt; inputFile .getName first Character/getNumericValue)\n                input (string-&gt;bitmap (slurp inputFile))]\n           (assoc data output (conj (data output) input))\n           ))\n         {} (.listFiles (io/file \&quot;trainingDigits\&quot;))))&quot; &quot;(def sample-data (get-inputs2 \&quot;trainingDigits\&quot;))&quot; &quot;(+ 1 2)&quot; &quot;(def nn (build-network [2 3 2] .1 200 sample-data))&quot; &quot;(def nn (build-network [2 3 2] 0 .1 200 sample-data))&quot; &quot;(def nn (build-network [2 3 2] 0.1 200 sample-data))&quot; &quot;(def nn (build-network [2 3 1] 0.1 200 sample-data))&quot; &quot;nn&quot; &quot;(fp nn [1 1])&quot; &quot;(fp nn [1 0])&quot; &quot;(fp nn [0 1])&quot; &quot;(fp nn [0 0])&quot; &quot;def decimal-&gt;binary {0 [0 0 0 0] 1 [0 0 0 1] 2 [0 0 1 0] 3 [0 0 1 1] 4 [0 1 0 0] 5 [0 1 0 1 ] 6 [0 1 1 0 ] 7 [0 1 1 1 ] 8 [1 0 0 0 ] 9 [1 0 0 1]}\n\n(defn string-&gt;bitmap [s] (vec (map #(Character/getNumericValue %) (filter #(and (not= % \\return) (not= % \\newline)) s))))\n\n(defn get-labels [fileList] (map #(-&gt;&gt; % .getName first Character/getNumericValue) fileList))\n\n(defn get-inputs [file]\n (let [output (-&gt;&gt; file .getName first Character/getNumericValue decimal-&gt;binary)\n       input (string-&gt;bitmap (slurp file))]\n  [input output])\n )&quot; &quot;(def decimal-&gt;binary {0 [0 0 0 0] 1 [0 0 0 1] 2 [0 0 1 0] 3 [0 0 1 1] 4 [0 1 0 0] 5 [0 1 0 1 ] 6 [0 1 1 0 ] 7 [0 1 1 1 ] 8 [1 0 0 0 ] 9 [1 0 0 1]})\n\n(defn string-&gt;bitmap [s] (vec (map #(Character/getNumericValue %) (filter #(and (not= % \\return) (not= % \\newline)) s))))\n\n(defn get-labels [fileList] (map #(-&gt;&gt; % .getName first Character/getNumericValue) fileList))\n\n(defn get-inputs [file]\n (let [output (-&gt;&gt; file .getName first Character/getNumericValue decimal-&gt;binary)\n       input (string-&gt;bitmap (slurp file))]\n  [input output])\n )&quot; &quot;(require clojure.java.io as io)&quot; &quot;(require 'clojure.java.io as io)&quot; &quot;(require 'clojure.java.io :as io)&quot; &quot;(require '[clojure.java.io :as io])&quot; &quot;(def sample-data (map get-inputs (.listFiles (io/file \&quot;trainingDigits\&quot;))))&quot; &quot;sample-data&quot;], :remote []}}</component>
</project>